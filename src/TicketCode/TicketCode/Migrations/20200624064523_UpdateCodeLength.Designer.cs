// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TicketCode.Core.Data;

namespace TicketCode.WebHost.Migrations
{
    [DbContext(typeof(TcDbContext))]
    [Migration("20200624064523_UpdateCodeLength")]
    partial class UpdateCodeLength
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("TicketCode.Core.Models.TcAccounts", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<bool>("bDisable")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("sAppId")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("sAppName")
                        .IsRequired()
                        .HasColumnType("varchar(10) CHARACTER SET utf8mb4")
                        .HasMaxLength(10);

                    b.Property<string>("sAppSecret")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<DateTime>("tCreateTime")
                        .HasColumnType("datetime(6)");

                    b.HasKey("id");

                    b.HasIndex("sAppId")
                        .IsUnique();

                    b.ToTable("TcAccounts");
                });

            modelBuilder.Entity("TicketCode.Core.Models.TcConsume", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("iAccountId")
                        .HasColumnType("bigint");

                    b.Property<long>("iFullCode")
                        .HasColumnType("bigint");

                    b.Property<long>("iGroupId")
                        .HasColumnType("bigint");

                    b.Property<long>("iRequestLineId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("tConsumeTime")
                        .HasColumnType("datetime(6)");

                    b.HasKey("id");

                    b.HasIndex("iAccountId");

                    b.HasIndex("iFullCode");

                    b.HasIndex("iGroupId");

                    b.HasIndex("iRequestLineId")
                        .IsUnique();

                    b.ToTable("TcConsume");
                });

            modelBuilder.Entity("TicketCode.Core.Models.TcGroupInAccount", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("iAccountId")
                        .HasColumnType("bigint");

                    b.Property<long>("iGroupId")
                        .HasColumnType("bigint");

                    b.HasKey("id");

                    b.HasIndex("iAccountId");

                    b.HasIndex("iGroupId");

                    b.ToTable("TcGroupInAccount");
                });

            modelBuilder.Entity("TicketCode.Core.Models.TcGroups", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<bool>("bDelete")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("bDisable")
                        .HasColumnType("tinyint(1)");

                    b.Property<long>("iCurrAvaNumber")
                        .HasColumnType("bigint");

                    b.Property<long>("iIncrNumber")
                        .HasColumnType("bigint");

                    b.Property<int>("iLength")
                        .HasColumnType("int");

                    b.Property<long>("iMinNumber")
                        .HasColumnType("bigint");

                    b.Property<int>("iPrefixCode")
                        .HasColumnType("int");

                    b.Property<long>("iUsedNumber")
                        .HasColumnType("bigint");

                    b.Property<string>("sName")
                        .IsRequired()
                        .HasColumnType("varchar(10) CHARACTER SET utf8mb4")
                        .HasMaxLength(10);

                    b.Property<DateTime>("tCreateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("tUpdateTime")
                        .HasColumnType("datetime(6)");

                    b.HasKey("id");

                    b.ToTable("TcGroups");
                });

            modelBuilder.Entity("TicketCode.Core.Models.TcRequestLines", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<bool>("bConsume")
                        .HasColumnType("tinyint(1)");

                    b.Property<long>("iCode")
                        .HasColumnType("bigint");

                    b.Property<long>("iFullCode")
                        .HasColumnType("bigint");

                    b.Property<long>("iRequestId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("tConsumeTime")
                        .HasColumnType("datetime(6)");

                    b.HasKey("id");

                    b.HasIndex("iFullCode");

                    b.HasIndex("iRequestId");

                    b.ToTable("TcRequestLines");
                });

            modelBuilder.Entity("TicketCode.Core.Models.TcRequsets", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("iAccountId")
                        .HasColumnType("bigint");

                    b.Property<long>("iGroupId")
                        .HasColumnType("bigint");

                    b.Property<int>("iNumber")
                        .HasColumnType("int");

                    b.Property<string>("sMemo")
                        .HasColumnType("varchar(250) CHARACTER SET utf8mb4")
                        .HasMaxLength(250);

                    b.Property<string>("sOuterNo")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("sRequestNo")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("tCreateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("tExpireTime")
                        .HasColumnType("datetime(6)");

                    b.HasKey("id");

                    b.HasIndex("iGroupId");

                    b.HasIndex("iAccountId", "sOuterNo")
                        .IsUnique();

                    b.ToTable("TcRequsets");
                });

            modelBuilder.Entity("TicketCode.Core.Models.TcConsume", b =>
                {
                    b.HasOne("TicketCode.Core.Models.TcAccounts", "TcAccount")
                        .WithMany()
                        .HasForeignKey("iAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TicketCode.Core.Models.TcGroups", "TcGroup")
                        .WithMany()
                        .HasForeignKey("iGroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TicketCode.Core.Models.TcRequestLines", "TcRequestLine")
                        .WithOne("TcConsume")
                        .HasForeignKey("TicketCode.Core.Models.TcConsume", "iRequestLineId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("TicketCode.Core.Models.TcGroupInAccount", b =>
                {
                    b.HasOne("TicketCode.Core.Models.TcAccounts", "TcAccount")
                        .WithMany("TcGroupInAccounts")
                        .HasForeignKey("iAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TicketCode.Core.Models.TcGroups", "TcGroup")
                        .WithMany("TcGroupInAccounts")
                        .HasForeignKey("iGroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("TicketCode.Core.Models.TcRequestLines", b =>
                {
                    b.HasOne("TicketCode.Core.Models.TcRequsets", "TcRequset")
                        .WithMany("TcRequestLines")
                        .HasForeignKey("iRequestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("TicketCode.Core.Models.TcRequsets", b =>
                {
                    b.HasOne("TicketCode.Core.Models.TcAccounts", "TcAccount")
                        .WithMany()
                        .HasForeignKey("iAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TicketCode.Core.Models.TcGroups", "TcGroup")
                        .WithMany()
                        .HasForeignKey("iGroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
